<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Lens of Lily</title>
  <style>
    body { font-family: sans-serif; margin: 20px; background: #f4f4f4; }
    h1 { color: green; text-align: center; font-size: 2.5em; }
    #folder-container, #image-gallery {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 20px;
      margin-top: 20px;
    }
    .folder, .image-container {
      background: #fff;
      border-radius: 8px;
      padding: 10px;
      text-align: center;
      cursor: pointer;
      position: relative;
    }
    .folder img, .image-container img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 8px;
    }
    .folder-name {
      margin-top: 8px;
      font-weight: bold;
    }
    #buttons {
      position: fixed;
      bottom: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }
    .btn {
      background: green;
      color: white;
      border: none;
      padding: 10px;
      border-radius: 5px;
      cursor: pointer;
    }
    #back-button {
      display: none;
      position: absolute;
      top: 20px;
      left: 20px;
      background: green;
      color: white;
      padding: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    #fullscreen-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.8);
      justify-content: center;
      align-items: center;
    }
    #fullscreen-modal img {
      max-width: 90%;
      max-height: 90%;
    }
    #create-folder-container {
      display: none;
      position: fixed;
      bottom: 80px;
      right: 20px;
      background: #fff;
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>

<h1>Lens of Lily</h1>
<button id="back-button" onclick="goBack()">Back</button>

<div id="folder-container"></div>
<div id="image-gallery"></div>

<div id="buttons">
  <button class="btn" onclick="toggleCreateFolder()">Add Folder</button>
  <button class="btn" onclick="refreshData()">Refresh</button>
</div>

<div id="create-folder-container">
  <input id="new-folder" placeholder="folder/path" />
  <button class="btn" onclick="createFolder()">Create</button>
  <button class="btn" onclick="toggleCreateFolder()">Cancel</button>
</div>

<div id="fullscreen-modal" onclick="this.style.display='none'">
  <img id="fullscreen-img" />
  <button id="download-image" class="btn" style="position: absolute; bottom: 40px;">Download</button>
</div>

<script>
const GH_USER = "GitImageHost";
const GH_REPO = "ImageHoster";
const GH_BRANCH = "main";
const GH_TOKEN = "your token here"; // REQUIRED for uploading

let currentFolder = "";

async function apiContents(path = "") {
  const res = await fetch(`https://api.github.com/repos/${GH_USER}/${GH_REPO}/contents/${path}`);
  if (!res.ok) throw new Error("GitHub API Error");
  return res.json();
}

async function loadFolders() {
  try {
    const list = await apiContents();
    const dirs = list.filter(i => i.type === "dir");
    const cont = document.getElementById("folder-container");
    cont.innerHTML = "";
    dirs.forEach(d => {
      const div = document.createElement("div");
      div.className = "folder";
      div.setAttribute("data-folder", d.path);
      div.ondrop = handleDropOnFolder;
      div.ondragover = e => e.preventDefault();
      div.onclick = () => loadImages(d.path);

      const img = document.createElement("img");
      img.src = `https://raw.githubusercontent.com/${GH_USER}/${GH_REPO}/${GH_BRANCH}/folder.png`;

      const name = document.createElement("div");
      name.className = "folder-name";
      name.textContent = d.name;

      div.appendChild(img);
      div.appendChild(name);
      cont.appendChild(div);
    });

    document.getElementById("folder-container").style.display = "grid";
    document.getElementById("image-gallery").innerHTML = "";
    document.getElementById("back-button").style.display = "none";
  } catch (err) {
    console.error("Error loading folders:", err);
    alert("Could not load folders.");
  }
}

async function loadImages(path) {
  currentFolder = path;
  document.getElementById("folder-container").style.display = "none";
  document.getElementById("back-button").style.display = "block";

  try {
    const list = await apiContents(path);
    const images = list.filter(i => i.type === "file" && /\.(jpe?g|png|gif)$/i.test(i.name));
    const cont = document.getElementById("image-gallery");
    cont.innerHTML = "";
    images.forEach(img => {
      const wrap = document.createElement("div");
      wrap.className = "image-container";
      const image = document.createElement("img");
      image.src = img.download_url;
      image.onclick = () => openFullscreen(img.download_url);
      wrap.appendChild(image);
      cont.appendChild(wrap);
    });
  } catch (err) {
    console.error("Error loading images:", err);
    alert("Could not load images.");
  }
}

function openFullscreen(src) {
  document.getElementById("fullscreen-img").src = src;
  document.getElementById("fullscreen-modal").style.display = "flex";
}

function goBack() {
  currentFolder = "";
  loadFolders();
}

function toggleCreateFolder() {
  const box = document.getElementById("create-folder-container");
  box.style.display = box.style.display === "none" ? "block" : "none";
}

async function createFolder() {
  const path = document.getElementById("new-folder").value.trim();
  if (!path) return alert("Please enter a path.");
  try {
    const res = await fetch(`https://api.github.com/repos/${GH_USER}/${GH_REPO}/contents/${path}/.keep`, {
      method: "PUT",
      headers: {
        Authorization: `token ${GH_TOKEN}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: `Create folder ${path}`,
        content: btoa("keep"),
        branch: GH_BRANCH
      })
    });
    if (res.ok) {
      toggleCreateFolder();
      loadFolders();
    } else {
      throw new Error(await res.text());
    }
  } catch (err) {
    console.error("Create folder error:", err);
    alert("Could not create folder.");
  }
}

async function handleDropOnFolder(e) {
  e.preventDefault();
  const folder = e.currentTarget.getAttribute("data-folder");
  const files = Array.from(e.dataTransfer.files);

  for (const file of files) {
    if (!file.type.startsWith("image/")) continue;
    const base64 = await new Promise(res => {
      const reader = new FileReader();
      reader.onload = () => res(reader.result.split(',')[1]);
      reader.readAsDataURL(file);
    });

    const uploadPath = `${folder}/${file.name}`;
    try {
      const resp = await fetch(`https://api.github.com/repos/${GH_USER}/${GH_REPO}/contents/${uploadPath}`, {
        method: "PUT",
        headers: {
          Authorization: `token ${GH_TOKEN}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          message: `Add ${file.name}`,
          content: base64,
          branch: GH_BRANCH
        })
      });
      if (!resp.ok) throw new Error(await resp.text());
    } catch (err) {
      console.error("Upload failed:", err);
      alert(`Failed to upload ${file.name}`);
    }
  }

  if (currentFolder === folder) loadImages(folder);
}

loadFolders();
</script>
<script>
// ... existing code above ...

function refreshData() {
  if (currentFolder) {
    loadImages(currentFolder);
  } else {
    loadFolders();
  }
}

// Auto-refresh every 10 seconds
setInterval(() => {
  refreshData();
}, 5000); // 10,000 ms = 10 seconds

</script>


</body>
</html>
